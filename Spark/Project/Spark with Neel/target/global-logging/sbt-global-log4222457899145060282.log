[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Oracle Corporation Java 11.0.14)
[debug] Load.defaultLoad until apply took 385.138584ms
[debug]           Load.loadUnit: plugins took 569.821917ms
[debug]           Load.loadUnit: defsScala took 4.775833ms
[debug] [Loading] Scanning directory /Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark with Neel/project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark with Neel/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 67.883291 ms
[debug]               Load.resolveProject(spark-with-neel-build) took 285.311791ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-with-neel-build, base: /Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark with Neel/project, plugins: List(<none>))) took 588.948958ms
[debug] [Loading] Done in /Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark with Neel/project, returning: (spark-with-neel-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 780.649ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.293792ms
[debug]         Load.loadUnit(file:/Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark%20with%20Neel/project/, ...) took 1418.662291ms
[debug]       Load.apply: load took 3218.5865ms
[debug]       Load.apply: resolveProjects took 48.80675ms
[debug]       Load.apply: finalTransforms took 620.094791ms
[debug]       Load.apply: config.delegates took 16.049875ms
[debug]       Load.apply: Def.make(settings)... took 5347.744834ms
[debug]       Load.apply: structureIndex took 1023.4315ms
[debug]       Load.apply: mkStreams took 2.149625ms
[info] loading project definition from /Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark with Neel/project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 16587.361375ms
[debug]     Load.loadUnit: defsScala took 0.029708ms
[debug] [Loading] Scanning directory /Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark with Neel
[debug]       Load.loadUnit: mkEval took 40.999041ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 55.609875 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 111.599333ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: /Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark with Neel, plugins: List(<none>))) took 179.788041ms
[debug] [Loading] Done in /Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark with Neel, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1343.726875ms
[debug]     Load.loadUnit: cleanEvalClasses took 76.794208ms
[debug]   Load.loadUnit(file:/Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark%20with%20Neel/, ...) took 18015.195791ms
[debug] Load.apply: load took 18076.104167ms
[debug] Load.apply: resolveProjects took 2.805625ms
[debug] Load.apply: finalTransforms took 104.220541ms
[debug] Load.apply: config.delegates took 1.886625ms
[debug] Load.apply: Def.make(settings)... took 986.793375ms
[debug] Load.apply: structureIndex took 230.727083ms
[debug] Load.apply: mkStreams took 0.012208ms
[info] set current project to spark (in build file:/Users/nilanjan/Documents/IT/BigData/Spark/Project/Spark%20with%20Neel/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[warn] sbt server could not start because there's another instance of sbt running on this build.
[warn] Running multiple instances is unsupported
